= boltcms-cheatsheet (bolt 3.4)
:toc:


== Comunity & support
boltcms.slack.com

== Useful Links: 
https://docs.bolt.cm/3.3/cheatsheet[official cheatsheet]


== API Docs 
https://docs.bolt.cm/api/bolt/bolt/3.4/Bolt.html[bolt cms 3.4 api docs] 

== Field types

=== Sample Table
|===
|Option | Desc
|===

=== Common Options https://docs.bolt.cm/3.4/fields/common[link to bolt docs]
|===
|Option | Desc
|type 
|Is required & must be one of the listed contnet types or custom types added through extensions.

|label
|If omitted, the name of the field will be used as a label in the edit-screen. Replace 'Foo' with the desired label of the field.

|group
|Group the field under a certain tab when editing. 

Simply add group to the fields that you would like to place under a certain tab. You don't need to specify all of the fields with a grouping, just the ones that are the first on a tab. Any subsequent fields without a specified group will fall under the previously set grouping.

|prefix
|Text/HTML to show before the field. Add some extra text, labels or other markup to how a field is displayed in the Bolt backend, when editing a record.

|postfix
|Text/HTML to show after the field. Add some extra text, labels or other markup to how a field is displayed in the Bolt backend, when editing a record.

|info
|Use for displaying extra information about the field in a info popup besides the label.

|default
|The default value for a field, if applicable.

|required
|make this field required so that the record cannot be saved without it being filled. 

You can use the required option to make a field required. Combine it with the *pattern* option to make sure that a field contains an email-address, or that a title is no longer than a certain amount of characters. Note that the requirements are only enforced in the browser, so don't "trust" any data that's been entered by an editor.

|pattern
|Add a custom validation pattern to validate against when saving.  Examples of patterns that can be used, can be found on the website http://html5pattern.com. 

|readonly
|Do not allow an editor to change the value of this field.

|index
|Add a database index for this field, only add if you know what this means.

|class
|Add a CSS selector to the field element.
|===

=== Text field https://docs.bolt.cm/3.4/fields/text[link to bolt docs]
[cols="2,5a"]
|===
|Option | Desc
|class
|Can be set to either of the: 

* narrow to make the field more narrow
* large to make both the field and the font larger

|allowtwig
|can be set to true or false to control if twig may be used in the field

|variant
|set to inline to show the label next to the field instead of above it.

|pattern
|Use this to validate the field against a certain pattern.
|===

=== Slug field https://docs.bolt.cm/3.4/fields/slug[link to bolt docs]
[cols="2,5a"]
|===
|Option | Desc

|uses
|determines what field(s) are used to build the slug. Usually you want this set to the textfield that you use as the title, (often called title), but you can also use it with multiple fields like for example [title, subtitle].
|===

=== HTML field https://docs.bolt.cm/3.4/fields/html[link to bolt docs]
[cols="2,5a"]
|===
|Option | Desc

|allowtwig
|can be set to true or false to control if twig may be used in the field

|options
|contains the options for the WYSIWYG editor. See below for an example and the  http://docs.ckeditor.com/#!/api/CKEDITOR.config[CKEditor API] for more information on possible options:
```yml
    content:
            type: html
            options:
                ckeditor:
                    entities: true # this enables special characters to be stored as their HTML entity
                    entities_latin: true # this enables Latin characters to be stored as their HTML entity - eg when true, Â£ is stored as &pound;
                    height: 400
                    autoGrow_maxHeight: 400
                    autoGrow_onStartup: false
                    uiColor: '#BADA55'
                    autoGrow_minHeight: 300
                    
```
                    
|===

=== Image field https://docs.bolt.cm/3.4/fields/image[link to bolt docs]
[cols="2,5a"]
|===
|Option | Desc

|extensions
|Allows you to restrict users to only be able to upload files with certain file extensions.

|attrib
|Can be set to either of the following: 
* alt: Show a text field for the alt parameter 
* title: Show a text field for the title parameter 
* [title, alt] Show both fields 

|upload
|Allows you to upload files for this field into a specified directory so they remain grouped. This directory will be created in {%web%}/files/

|===

=== File field https://docs.bolt.cm/3.4/fields/file[link to bolt docs]
|===
|Option | Desc
|extensions
|Allows you to restrict users to only be able to upload files with certain file extensions. example: ```extensions: [ png, pdf,jpeg ]```

|upload
|Allows you to upload files for this field into a specified directory so they remain grouped. This directory will be created in {%web%}/files/
|===

=== Video field https://docs.bolt.cm/3.4/fields/video[link to bolt docs]
[cols="2,5a"]
|===
|USAGE | Desc
|{{ record.video.html }}
|To insert the <embed>-code for the video

|{{ record.video.responsive }}
|There's also a special 'responsive' HTML snippet available for videos. (more info on original bolt docs)
|===

=== Select field https://docs.bolt.cm/3.4/fields/select[link to bolt docs]
[cols="2,5a"]
|===
|Option | Desc

|values
|Examples:

- simple select 

 values: [ none, foo, bar ] 

- You can also get the values from the records of a particular ContentType. 

 values: mycontenttype/fieldname 

- For example to display both the id and title of 'pages': 

 values: pages/id,title 

- If you wish to store another field or value from the original ContentType in your database, use the keys setting. If you do this, it will not store the 'id', but the value of the field you specify. For example:

```
      somevalue:
            type: select
            values: programme/name
            sort: name
            autocomplete: true
            limit: 1000
``` 

- In adition to filters on the ContentType values, you can use taxonomy conditions, as in the following example:

```
    somevalue:
            type: select
            values: pages/title
            filter: { categories: news }
```

- Populating the values from multiple ContentTypes

 values: (events,news,pages)/title

- Additional options

```
  somevalues:
            type: select
            values: [ none, foo, bar ]
            multiple: true
``` 
- Making the selected values sortable
``` 
   pages:
            type: select
            values: pages/id,slug
            multiple: true
            autocomplete: true
            sortable: true
```




|===

=== Markdown field ToDo  [link to bolt docs]
[cols="2,5a"]
|===
|Option | Desc
|===


=== Textarea field https://docs.bolt.cm/3.4/fields/textarea[link to bolt docs]
[cols="2,5a"]
|===
|Option | Desc
|allowtwig
|can be set to true or false to control if twig may be used in the field

|pattern
|Use this to validate the field against a certain pattern.
|===


=== Repeater field https://docs.bolt.cm/3.4/fields/repeater[link to bolt docs]
A special field type available as a field definition is the repeater field type which allows you to compose an array-like structure of sub-fields within a single field name.

[cols="2,5a"]
|===
|Option | Desc
|limit
|Limit how many sets an editor is able to create. If you omit this setting, then an unlimited number of sets can be created. The configuration for that option looks like this:

|initial
|How many empty sets are created initially. This defaults to 1 but when a sub-field is marked as required you may want to set it to 0 to ensure that a user must manually add a set first.

|example
| ```yml 
        features:
            type: repeater
            limit: 3
            initial: 0
            fields:
                repeattitle:
                    type: text
                repeatimage:
                    type: image
                    extensions: [ gif, jpg, png ]
                repeatcontent:
                    type: html
```
|===


=== Templateselect field  https://docs.bolt.cm/3.4/fields/templateselect[link to bolt docs]
[cols="2,5a"]
|===
|Option | Desc
|filter
|A glob pattern that decides which templates to show. For example to only match templates that start with the word "pages" you can do this:

|===


=== Sample  [link to bolt docs]
[cols="2,5a"]
|===
|Option | Desc
|===



=== Sample  [link to bolt docs]
[cols="2,5a"]
|===
|Option | Desc
|===



=== Sample  [link to bolt docs]
[cols="2,5a"]
|===
|Option | Desc
|===



=== Sample  [link to bolt docs]
[cols="2,5a"]
|===
|Option | Desc
|===



== Extensions 



== Credits
Thanks to great comunity & support. The info in this repo is based on answers from the live chat & the following websites:
* https://docs.bolt.cm
